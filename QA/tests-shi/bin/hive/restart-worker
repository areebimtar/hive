#!/usr/bin/env bash
# Retart worker server

[[ "$1" != "-h" && "$1" != "--help" ]] || { echo "Usage: `basename $0` <cci_build_no>"; exit 1; }
set -e; s_dir=$(dirname "$(readlink -e "${BASH_SOURCE[0]}")"); . "$s_dir/../../lib/functions.sh" "$s_dir"

# Check in manager log, whether worker has successfully connected to manager
function worker_connected {
	# Find the first line of last manager restart in its log
	startline=`grep "==> Listen at" "$QA_LOG_DIR/manager-$QA_INSTANCE_VIRT.log" | tail -n1`

	# Search the log from that line for "Worker connected" message
	if ! (sed -ne "/$startline/,$ p" "$QA_LOG_DIR/manager-$QA_INSTANCE_VIRT.log" | grep "Worker connected" > /dev/null); then
	    log1 "Worker did not connect"
	    return 1
	else
	    return 0
	fi
}

export QA_INSTANCE_VIRT=${QA_INSTANCE_VIRT:-0}
read_configs virt
check_variables  QA_PGUSER QA_PGPASSWORD QA_PGDATABASE_HIVE QA_ETSY_HOST QA_ETSY_PORT QA_MANAGER_PORT QA_RABBIT_URI

product_dir="$INSTANCES_DIR/$QA_INSTANCE/virt/$QA_INSTANCE_VIRT/builds/current/product"
param="$product_dir/dist/worker/server.js"

if [ "$1" = "--kill" ]; then
	kill_process "$QA_NODE_BINARY" "$param"
else
	[ -n "$QA_LOG_DIR" ] && log_file="$QA_LOG_DIR/worker-$QA_INSTANCE_VIRT.log" || log_file=''

	export DB_USER=$QA_PGUSER
	export DB_PASSWORD=$QA_PGPASSWORD
	export DB_NAME=$QA_PGDATABASE_HIVE

	export ETSY_REQUEST_TOKEN_URL="http://$QA_ETSY_HOST:$QA_ETSY_PORT/v2/oauth/request_token"
	export ETSY_ACCESS_TOKEN_URL="http://$QA_ETSY_HOST:$QA_ETSY_PORT/v2/oauth/access_token"
	export ETSY_USER_AUTHORIZATION_URL="http://$QA_ETSY_HOST:$QA_ETSY_PORT/authorize/just_return_redirect"
	export ETSY_API_URL="http://$QA_ETSY_HOST:$QA_ETSY_PORT/v2"


	export HIVE_SYNC_MANAGER_URL="http://localhost:$QA_MANAGER_PORT"
	export RABBIT_URI=$QA_RABBIT_URI

	export AWS_IMAGES_REGION="$QA_AWS_IMAGES_REGION"
	export AWS_IMAGES_BUCKET_NAME="$QA_AWS_IMAGES_BUCKET_NAME/$QA_S3_USER/$QA_INSTANCE/$QA_INSTANCE_VIRT"
	export AWS_IMAGES_ACCESS_KEY_ID="$QA_AWS_IMAGES_ACCESS_KEY_ID"
	export AWS_IMAGES_SECRET_KEY="$QA_AWS_IMAGES_SECRET_KEY"

	restart_process "$QA_NODE_BINARY" "$product_dir" "$log_file" "$param"

	# Check whether worker connected to manager
	i=5
	while ! worker_connected && [ $i -gt 0 ]; do
		sleep 1
		if worker_connected; then
		    log1 "Worker connected after 1 sec"
		    break
		fi
		restart_process "$QA_NODE_BINARY" "$product_dir" "$log_file" "$param"
		i=$((i - 1))
	done
	
	if [ $i -eq 0 ] && ! worker_connected; then
	    die "Failed to start worker"
	fi
fi

RESULT_MESSAGE="$PROG: finished successfully"
