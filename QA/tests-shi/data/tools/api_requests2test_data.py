#!/usr/bin/env python3

# ----------------------------------------------------------------------------------------------
# This script downloads requests made to Etsy emulator and generates test data for tests from it
# - the result is stored in _new_test_data.py file.
# ----------------------------------------------------------------------------------------------


import sys
import os
import json
import re
from tests.etsy_emulator_support import EtsyEmulatorInterface
from pprint import pformat

# Where etsy emulator is running
ETSY_EMULATOR_URL = 'http://' + os.environ['QA_ETSY_HOST'] + ':' + os.environ['QA_ETSY_PORT']

# Which HTTP requests will be chosen for test data - this will differ from test to test
FILTER_METHODS = ['PUT', 'POST', 'DELETE']

api_products_unpacked_counter = 1


def process_request(request):
    """ Processes request data if needed

    For some particular requests more detailed processing is needed to generate test data
    - for Inventory requests function generates helper variable api_products_unpackedX with its data

    :param request: Data of one request as downloaded from Etsy emulator
    :return: Text output
    """
    global api_products_unpacked_counter
    output = ''

    if re.match('/v2/listings/[\d]*/inventory\?.*', request["url"]):
        # if it is inventory requests, we need to "unpack" products field and put it in helper variable
        products = json.loads(request["body"]["products"])

        var_name = 'api_products_unpacked{}'.format(api_products_unpacked_counter)
        output = var_name + ' = '
        output += pformat(products) + '\n\n'

        # we replace original data with placehoder - will be replaced later by exact variable name
        del(request["body"]["products"])
        request["body"]["_products_unpacked"] = '%{}%'.format(var_name)
        api_products_unpacked_counter += 1

    return output

# Download requests from etsy emulator
emulator_interface = EtsyEmulatorInterface()
data = emulator_interface.get_api_calls()

# Sort requests to be able to compare with actual calls in test
data2 = emulator_interface.sort_api_calls(data)

# Generate source code for test data
text_output = '# Generated by {}\n\n'.format(os.path.basename(sys.argv[0]))

# Process individual requests if needed
for request in data2:
    if request["method"] in FILTER_METHODS:
        products_string = process_request(request)
        text_output += products_string

# Put together final list of requests as we need it for test data
out = []
for request in data2:
    method = request['method']
    if method in FILTER_METHODS:
        url = request['url']
        body = request['body']
        item = {method: url, 'body': body}
        out.append(item)

# Join the name of the main variable for test_data and the data itself
text_output += 'expected_api_calls = ' + pformat(out)
# replace variable placeholders by variable names
text_output = re.sub(r'\'%(.*)%\'', r'\1', text_output)

print(text_output)

with open('../_new_test_data.py', 'w') as fp:
    fp.writelines(text_output)
